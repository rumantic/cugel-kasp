<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HisPlayerUnityDLL</name>
    </assembly>
    <members>
        <member name="M:HISPlayerAPI.HISPlayerFactory.GetHISPlayerInterface">
            <summary>
            Creates an instance of HisPlayerInterface for the currently selected platform. This allows to use one API for all the supported platforms. 
            It's recommended to use this and not instantiate directly a class that extends HisPlayerInterface.
            </summary>
            <returns>A HisPlayerInterface instance.</returns>
        </member>
        <member name="T:HISPlayerAPI.AdsProperties">
            <summary>
            It is used for managing the ad insertion of the videos
            <br></br>
            Supported platforms: WebGL
            </summary>
        </member>
        <member name="T:HISPlayerAPI.StreamProperties">
            <summary>
            StreamProperties contains the information that is needed to create a new stream.
            The streams can be added using the Editor or the AddStream API
            </summary>
        </member>
        <member name="M:HISPlayerAPI.StreamProperties.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Alternative constructor to set the loop and the auto transition behaviours 
            <br/>
            * isLoopPlaybackEnabled: True - Repeat the current playback when it finishes
            <br/>
            * isAutoTransitionEnabled: True - Automatically changes to the next playback in the list if possible. 
            This action won't have effect when isLoopPlaybackEnabled is true
            </summary>
        </member>
        <member name="P:HISPlayerAPI.StreamProperties.EnableRendering">
            <summary>
            Toggle render-nonRender of the stream
            </summary>
        </member>
        <member name="P:HISPlayerAPI.StreamProperties.FlipTextureVertically">
            <summary>
            Flip the texture of the stream vertically when it's created
            Only supported on Android
            </summary>
        </member>
        <member name="P:HISPlayerAPI.StreamProperties.LoopPlayback">
            <summary>
            True - Repeat the current playback when it finishes
            </summary>
        </member>
        <member name="P:HISPlayerAPI.StreamProperties.AutoTransition">
            <summary>
            True - Automatically changes to the next playback in the list if possible.
             This action won't have effect when loopPlayback is true
            </summary>
        </member>
        <member name="T:HISPlayerAPI.HISPlayerManager">
            <summary>
            HISPlayerManager_Event, class dedicated to contain all the information
            and architecture related with the events.
            These events will get information from the plugin internally and they're
            going to be received in the customer side
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerManager._HISPlayer">
            <summary>
            Reference to the HISPlayerInterface
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.InitHISPlayer">
            <summary>
            Initializes HISPlayerInterface, but not the video content
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.CreatePlayerInterface">
            <summary>
            Creates the respective platform player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetUpPlayer">
            <summary>
            Initializes the player video stream
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.Release">
            <summary>
            Release the HISPlayer instance and all the resources. This function has to be called
            before closing the app or before changing the scene. 
            <para></para>
            OnApplicationQuit or similar Unity API functions are useful to the usage of this function 
            <para></para>
            HISPLAYER - WARNING: This action will delete the GameObject associated with this script.
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.Play(System.Int32)">
            <summary>
            Play the current video of a certain player
            <para></para>
            playerIndex: Index of the player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.Pause(System.Int32)">
            <summary>
            Pause the current video of a certain player
            <para></para>
            playerIndex: Index of the player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.Stop(System.Int32)">
            <summary>
            Stop the current video of a certain player
            <para></para>
            playerIndex: Index of the player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.Seek(System.Int32,System.Int64)">
            <summary>
            Seek the current video of a certain player to a 
            certain time of the track in miliseconds
            <para></para>
            playerIndex: Index of the player
            <br></br>
            miliseconds: Time of the track to be sought
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetVolume(System.Int32,System.Single)">
            <summary>
            Set the volument of a certain player
            <para></para>
            playerIndex: Index of the player
            <br></br>
            volume: New volume level. Values between 0.0f and 1.0f
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.AddStream(HISPlayerAPI.StreamProperties)">
            <summary>
            Add a new stream to the list
            <para></para>
            Supported platforms: Android, iOS, Windows
            <para></para>
            newStream: New stream to be added
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.AddVideoContent(System.Int32,System.String,HISPlayerAPI.HISPlayerMimeTypes)">
            <summary>
            Add new video to a certain player given the url.
            <para></para>
            If enableDRM variable is true, a video with empty license will be added.
            <para></para>
            This function support local files giving the path
            into the StreamingAssets folder with the extension 
            of the file:
            <br></br>
            Example: /HISPlayer/localPlayback_sample.mp4
            <para></para>
            playerIndex: Index of the player
            <br></br>
            url: New url to be added
            <br></br>
            mimeType: The specific MIME Type of the URL. Supported platforms: Android, iOS, macOS
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.ChangeVideoContent(System.Int32,System.Int32)">
            <summary>
            Change the current video of a certain player given a urlIndex
            <para></para>
            playerIndex: Index of the player
            <br></br>
            urlIndex: Index of the video inside the url list of the stream
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.ChangeVideoContent(System.Int32,System.String)">
            <summary>
            Change the current video of a certain player given a new url.
            <para></para>
            playerIndex: Index of the player
            <br></br>
            url: URL of the new video
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.ChangeVideoContent(System.Int32,System.String,HISPlayerAPI.HISPlayerMimeTypes)">
            <summary>
            Change the current video of a certain player given a new url and the specific MIME Type
            <para></para>
            Supported platforms: Android, iOS, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            url: URL of the new video
            <br></br>
            mimeType: The specific MIME Type of the URL
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.ChangeVideoContent(System.Int32,System.Int32,System.Int32,HISPlayerAPI.AdsProperties)">
            <summary>
            Change the current video of a certain player given the urlIndex, the resumePosition and the ads
            <para></para>
            playerIndex: Index of the player
            <br></br>
            urlIndex: Index of the video inside the url list of the stream
            <br></br>
            Optional - resumePosition: Time position in seconds where the new content is starting the playback in seconds, default value is 0. Supported platforms: WebGL 
            <br></br>
            Optional - ads: Ads properties to use when loading the new content, default value is null. Supported platforms: WebGL 
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.ChangeVideoContent(System.Int32,System.String,System.Int32,HISPlayerAPI.AdsProperties,HISPlayerAPI.HISPlayerMimeTypes)">
            <summary>
            Change the current video of a certain player given a new url, the resumePosition, the ads and the mimeType
            <para></para>
            playerIndex: Index of the player
            <br></br>
            url: URL of the new video
            <br></br>
            Optional - resumePosition: Time position in seconds where the new content is starting the playback in seconds, default value is 0. Supported platforms: WebGL 
            <br></br>
            Optional - ads: Ads properties to use when loading the new content, default value is null. Supported platforms: WebGL 
            <br></br>
            mimeType: The specific MIME Type of the URL. Supported platforms: Android, iOS, macOS
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.RemoveVideoContent(System.Int32,System.Int32)">
            <summary>
            Remove a certain url from the url list of a certain player
            <para></para>
            playerIndex: Index of the player
            <br></br>
            urlIndex: Index of the video inside the url list of the stream
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.RemoveStream(System.Int32)">
            <summary>
            Remove a certain stream
            <para></para>
            Supported platforms: Android, iOS, Windows
            <para></para>
            playerIndex: Index of the player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EnableCaptions(System.Int32,System.Boolean)">
            <summary>
            Enable or disable subtitles
            <para></para>
            Supported platforms: Android, iOS, macOS, Windows
            <para></para>
            playerIndex: Index of the player
            <br></br>
            enabled: Determine if to trigger subtitles
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetPlaybackSpeedRate(System.Int32,System.Single)">
            <summary>
            Set the speed rate of a certain player
            <para></para>
            Supported platforms: Android, iOS, macOS, Windows
            <para></para>
            playerIndex: Index of the player
            <br></br>
            speed: The speed must be greater than 0.0f and less than or equal to 8.0f
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetPlaybackSpeedRate(System.Int32)">
            <summary>
            Provide information about the current speed rate of a certain player
            <para></para>
            Supported platforms: Android, iOS, macOS, Windows
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Single"/>: The current speed rate
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetVideoPosition(System.Int32)">
            <summary>
            Provide information about the position of the current video of a certain player
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Int64"/>: The position of the video in milliseconds
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetVideoDuration(System.Int32)">
            <summary>
            Provide information about the duration of the current video of a certain player 
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Int64"/>: The duration of the video in milliseconds
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetTracks(System.Int32)">
            <summary>
            Provide the list of the available video tracks of a certain stream
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="!:HISPlayerTrack[]"/>: Array with all the video tracks
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetTrackBitrate(System.Int32,System.Int32)">
            <summary>
            Provide the bitrate of a certain video track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            trackIndex: Index of the track
            <para></para>
            returns <see cref="T:System.Int32"/>: The bitrate of the video track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetTrackWidth(System.Int32,System.Int32)">
            <summary>
            Provide the width of a certain video track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            trackIndex: Index of the track
            <para></para>
            returns <see cref="T:System.Int32"/>: The width of the video track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetTrackHeight(System.Int32,System.Int32)">
            <summary>
            Provide the height of a certain video track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            trackIndex: Index of the track
            <para></para>
            returns <see cref="T:System.Int32"/>: The height of the video track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetVideoWidth(System.Int32)">
            <summary>
            Provide the width of the current video track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Int32"/>: The width of the video track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetVideoHeight(System.Int32)">
            <summary>
            Provide the height of the current video track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Int32"/>: The height of the video track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetTrackID(System.Int32,System.Int32)">
            <summary>
            Provide the ID of a certain video track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            trackIndex: Index of the track
            <para></para>
            returns <see cref="T:System.String"/>: The ID of the video track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetTrackCount(System.Int32)">
            <summary>
            Provide the number of available video tracks of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Int32"/>: The number of video tracks
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetCaptionTrackList(System.Int32)">
            <summary>
            Provide the list of the available caption tracks of a certain stream
            <para></para>
            Supported platforms: Android, iOS, macOS, Windows
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="!:HISPlayerCaptionTrack[]"/>: Array with all the caption tracks
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetCaptionsCount(System.Int32)">
            <summary>
            Provide the number of available caption tracks of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Int32"/>: The number of caption tracks
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetCaptionID(System.Int32,System.Int32)">
            <summary>
            Provide the ID of a certain caption track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            ccTrackIndex: Index of the caption track
            <para></para>
            returns <see cref="T:System.String"/>: The ID of the caption track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetCaptionLanguage(System.Int32,System.Int32)">
            <summary>
            Provide the language of a certain caption track of a certain player
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            ccTrackIndex: Index of the caption track
            <para></para>
            returns <see cref="T:System.String"/>: The language of the caption track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetAudioTrackList(System.Int32)">
            <summary>
            Provide the list of the available audio tracks of a certain stream
            <para></para>
            Supported platforms: Android, iOS, macOS
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="!:HISPlayerAudioTrack[]"/>: Array with all the audio tracks
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetAudioCount(System.Int32)">
            <summary>
            Provide the number of available audio tracks of a certain player
            <para></para>
            Supported platforms: Android, iOS, macOS
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Int32"/>: The number of audio tracks
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetAudioID(System.Int32,System.Int32)">
            <summary>
            Provide the ID of a certain audio track of a certain player
            <para></para>
            Supported platforms: Android, iOS, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            audioTrackIndex: Index of the audio track
            <para></para>
            returns <see cref="T:System.String"/>: The ID of the audio track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetAudioLanguage(System.Int32,System.Int32)">
            <summary>
            Provide the language of a certain audio track of a certain player
            <para></para>
            Supported platforms: Android, iOS, macOS
            <para></para>
            playerIndex: Index of the player
            <br></br>
            audioTrackIndex: Index of the audio track
            <para></para>
            returns <see cref="T:System.String"/>: The language of the audio track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.IsLive(System.Int32)">
            <summary>
            Check if the current playback of a certain player is live
            <para></para>
            Supported platforms: WebGL
            <para></para>
            playerIndex: Index of the player
            <para></para>
            returns <see cref="T:System.Boolean"/>: True if the playback is live
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetDecodedFrameBufferEnabled(System.Boolean,System.Int32)">
            <summary>
            Enable de Decoded Frame Buffer Functionality. 
            <para></para>
            This function can be called before or after the SetUp
            <para></para>
            This functionality will be enabled for one player only
            <para></para>
            Supported platforms: Android
            <para></para>
            enabled: Enable the decoded frame buffer
            <br></br>
            playerIndex: Index of the player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetDecodedFrameAtTimestamp(System.Int32,System.Boolean)">
            <summary>
            Retrieve a Texture2D with the decoded frame at a given timestamp
            <para></para>
            If no frame matches the timestamp exactly, it will retrieve the frame immediately before.
            <para></para>
            Supported platforms: Android
            <para></para>
            msec: The offset in milliseconds from the beginning of the media from which the decoded frame should be retrieved
            <br></br>
            deletePreviousFrames: Whether to delete older frames from the Decoded Frames buffer. Default: true
            <para></para>
            returns <see cref="T:System.Threading.Tasks.Task`1"/>: The texture 2D of the requested frame, or null if the frame is not available for the given timestamp
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetDecodedFramesBufferRange">
            <summary>
            Retrieves the range of the Decoded Frames Buffer in milliseconds
            <para></para>
            Supported platforms: Android
            <para></para>
            returns <see cref="T:UnityEngine.Vector2Int"/>: A <c>Vector2Int</c> with the range in milliseconds
            (with the start at the X component and the end at the Y component) 
            or <c>Vector2Int.zero</c> if the buffer is empty
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetMaxBitrate(System.Int32,System.Int32)">
            <summary>
            Set a new maximum bitrate (in bits per second) of a specific player.
            <para></para>
            It doesn't disable ABR.
            <para></para>
            Supported platforms: Android, macOS
            <para></para>
            playerIndex: The index of the player
            <br></br>
            bitrate: The maximum bitrate
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetMinBitrate(System.Int32,System.Int32)">
            <summary>
            Set a new minimum bitrate (in bits per second) of a specific player.
            <para></para>
            It doesn't disable ABR.
            <para></para>
            Supported platforms: Android
            <para></para>
            playerIndex: The index of the player
            <br></br>
            bitrate: The minimum bitrate
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SelectTrack(System.Int32,System.Int32)">
            <summary>
            Select a certain track of a certain stream to be used as the main track.
            <para></para>
            This action will disable ABR. It is possible to activate ABR using <see cref="M:HISPlayerAPI.HISPlayerManager.SetMaxBitrate(System.Int32,System.Int32)"/> and
            <see cref="M:HISPlayerAPI.HISPlayerManager.SetMinBitrate(System.Int32,System.Int32)"/> with different values for each one or calling <see cref="M:HISPlayerAPI.HISPlayerManager.EnableABR(System.Int32)"/>
            <para></para>
            Supported platforms: Android, iOS, WebGL, macOS
            <para></para>
            playerIndex: The index of the selected player
            <br></br>
            trackIndex: The index of the selected track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SelectCaptionTrack(System.Int32,System.Int32)">
            <summary>
            Select a certain caption track of a certain player to be used.
            <para></para>
            Before using this function is recommended to use <see cref="M:HISPlayerAPI.HISPlayerManager.GetCaptionTrackList(System.Int32)"/>
            in order to know all the information about the captions
            <para></para>
            Supported platforms: Android, iOS, macOS, Windows
            <para></para>
            playerIndex: The index of the player
            <br></br>
            ccTrackIndex: The index of the selected caption
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SelectAudioTrack(System.Int32,System.Int32)">
            <summary>
            Select a certain audio track of a certain player to be used.
            <para></para>
            Before using this functions is recommended to use <see cref="M:HISPlayerAPI.HISPlayerManager.GetAudioTrackList(System.Int32)"/>
            in order to know all the information about the audio tracks
            <para></para>
            Supported platforms: Android, iOS, macOS
            <para></para>
            playerIndex: The index of the selected player
            <br></br>
            audioTrackIndex: The index of the selected audio track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetNetworkBandwidth">
            <summary>
            Provide the current network bandwidth.
            This value is just an estimation in kbps.
            <para></para>
            Supported platforms: Android
            <para></para>
            returns <see cref="T:System.Int32"/>: The current network bw in kbps
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetMinBufferDurationInMs(System.Int32)">
            <summary>
            Set the minimum duration of media that the player will attempt to ensure is
            buffered at all times, in milliseconds.
            <para></para>
            WARNING: This method must be called before setting up the player
            <para></para>
            Supported platforms: Android
            <para></para>
            minBufferDurationInMs: The minimum buffer duration in milliseconds
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetMaxBufferDurationInMs(System.Int32)">
            <summary>
            Set the maximum duration of media that the player will attempt to ensure is
            buffered at all times, in milliseconds.
            <para></para>
            WARNING: This method must be called before setting up the player
            <para></para>
            Supported platforms: Android
            <para></para>
            maxBufferDurationInMs: The maxmum buffer duration in milliseconds
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.SetPlaybackBufferInMs(System.Int32)">
            <summary>
            Sets the duration of media that must be buffered for playback to start or resume
            following a user action such as a seek, in milliseconds.
            <para></para>
            WARNING: This method must be called before setting up the player
            <para></para>
            Supported platforms: Android
            <para></para>
            playbackBufferInMs: The initial playback buffer duration in milliseconds
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EnableABR(System.Int32)">
            <summary>
            Enables the ABR to change automatically between tracks. 
            <para></para>
            Supported platforms: Android, WebGL
            <para></para>
            playerIndex: Index of the player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.DisableABR(System.Int32)">
            <summary>
            Disables the ABR to prevent the player from changing tracks regardless of bandwidth.
            <para></para>
            Supported platforms: Android, WebGL
            <para></para>
            playerIndex: Index of the player
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetAdDuration(System.Int32)">
            <summary>
            Get the duration of a certain advertisement
            <para></para>
            Supported platforms: WebGL
            <para></para>
            playerIndex: Index of the player
            returns <see cref="T:System.Single"/>: The duration of the advertisement
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetAdRemainingTime(System.Int32)">
            <summary>
            Get the remaining time of a certain advertisement
            <para></para>
            Supported platforms: WebGL
            <para></para>
            playerIndex: Index of the player
            returns <see cref="T:System.Single"/>: The remaining time of the advertisement
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.GetAdCurrentTime(System.Int32)">
            <summary>
            Get the current time of a certain advertisement
            <para></para>
            Supported platforms: WebGL
            <para></para>
            playerIndex: Index of the player
            returns <see cref="T:System.Single"/>: The current time of the advertisement
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.OnEventReceived(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Callback to be used as a delegate with HISPlayerInterface
            in order to listen the events internally
            <para></para>
            eventInfo: Struct which contains the information of the event
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventPlaybackReady(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_PLAYBACK_READY"/> is triggered.
            </summary>
            <remarks>
            This event occurs when the current playback of a stream is ready to be used
            <br></br>
            Calling functions such as GetTracks before this event is triggered will provide null information
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>float param1</term>
            <description>
            Number of tracks of the playback
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventPlaylistChange(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_PLAYLIST_CHANGE"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever the current playlist has been modified. It could happen when an URL has been  added or deleted
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>float param1</term>
            <description>
            Playlist length
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventVideoSizeChange(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_VIDEO_SIZE_CHANGE"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever the internal video size of the current track changes 
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>float param1</term>
            <description>
            Width of the video
            </description>
            </item>
            
            <item>
            <term>float param2</term>
            <description>
            Height of the video
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventPlaybackPlay(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_PLAYBACK_PLAY"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever an internal playback has been played
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventPlaybackPause(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_PLAYBACK_PAUSE"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever an internal playback has been paused
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventPlaybackStop(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_PLAYBACK_STOP"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever an internal playback has been stopped
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventPlaybackSeek(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_PLAYBACK_SEEK"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever an internal playback has been sought to a new time position
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>float param1</term>
            <description>
            Value of the old track position in milliseconds
            </description>
            </item>
            
            <item>
            <term>float param2</term>
            <description>
            Value of the new track position in milliseconds
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventVolumeChange(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_VOLUME_CHANGE"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever the volume has been modified
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>float param1</term>
            <description>
            New value for the volume
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventEndOfPlaylist(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_END_OF_PLAYLIST"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever an internal playlist reaches the end of the list.
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventOnTrackChange(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_ON_TRACK_CHANGE"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever the current playback track of the stream changes
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>float param1</term>
            <description>
            Number of video tracks available
            </description>
            </item>
            
            <item>
            <term>float param2</term>
            <description>
            Number of subtitles tracks available
            </description>
            </item>
            
            <item>
            <term>float param3</term>
            <description>
            Number of audio tracks available
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventOnStreamRelease(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_ON_STREAM_RELEASE"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever a player/stream has been released
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>float param1</term>
            <description>
            Number of players after releasing
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventTextRender(HISPlayerAPI.HISPlayerCaptionElement)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_TEXT_RENDER"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever a caption's text has been generated
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerCaptionElement"/> subtitlesInfo: Struct which contains the information of the subtitles:
            
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            type -> HISPLAYER_EVENT_TEXT_RENDER
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string caption</term>
            <description>
            The next caption?s text generated
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventAutoTransition(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_AUTO_TRANSITION"/> is triggered.
            </summary>
            <remarks>
            This event occurs whenever the playlist has changed of playback automatically.
            <br></br>
            This automatic process happens when a playback has finished and the next playback is released
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventPlaybackBuffering(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_PLAYBACK_BUFFERING"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever an internal playback is buffering
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventEndOfContent(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_END_OF_CONTENT"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever the current content ends
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventNetworkConnected(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_NETWORK_CONNECTED"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever the network has been reconnected
            <para></para>
            Platforms: Android, iOS, macOS, Windows
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            This event is not associated to any player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventTimelineUpdated(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_TIMELINE_UPDATED"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever the timeline of the current video has been updated. 
            <br></br>
            In the case of live content this may happens every certain time during the playing.
            <para></para>
            Platform: Android
            
            <list type="table">
            <description>
            HISPlayerEventInfo eventInfo parameter will provide of the following information in this event:
            </description>
            
            <item>
            <term>HISPlayerEventEvent eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
            
            <param name="eventInfo">Struct which containt the information of the event</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventOnId3Metadata(HISPlayerAPI.HISPlayerEventID3Metadata)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_ID3_METADATA"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs when a Yospace ad cue is parsed from the segments.
            <para></para>
            Platform: WebGL
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventID3Metadata"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            This event is not associated to any player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            <item>
            <term><see cref="T:HISPlayerAPI.ID3Metadata"/> metadata</term>
            <description>
            Metadata information of the event
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventAdBlockStarted(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_AD_BLOCK_STARTED"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever a group of advertisements starts.
            <para></para>
            Platform: WebGL
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            This event is not associated to any player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventAdBlockEnd(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_AD_BLOCK_END"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever a group of advertisements ends.
            <para></para>
            Platform: WebGL
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            This event is not associated to any player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventAdStarted(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_AD_STARTED"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever a single advertisement starts.
            <para></para>
            Platform: WebGL
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            This event is not associated to any player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventAdStopped(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_AD_STOPPED"/> is triggered.
            </summary>
            <remarks>
            
            This event occurs whenever a single advertisement ends.
            <para></para>
            Platform: WebGL
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
            <description>
            The enum type of the event
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            This event is not associated to any player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the event internally
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.EventAdPodsInfo(HISPlayerAPI.HISPlayerEventAdPodsInfo)">
             <summary>
             Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerEvent.HISPLAYER_EVENT_AD_PODS_INFO"/> is triggered.
             </summary>
             <remarks>
             This event occurs whenever there is an advertisement pods information indicating cue points of ad breaks.
             <para></para>
             Platform: WebGL
             <list type="table">
             <description>
             <see cref="T:HISPlayerAPI.HISPlayerEventInfo"/> eventInfo: Struct which contains the following information of the event:
             </description>
            
             <item>
             <term><see cref="T:HISPlayerAPI.HISPlayerEvent"/> eventType</term>
             <description>
             The enum type of the event
             </description>
             </item>
            
             <item>
             <term>int playerIndex</term>
             <description>
             The index of the associated player
             </description>
             </item>
            
             <item>
             <term>float param1</term>
             <description>
             Start cue point of ad break in milliseconds
             </description>
             </item>
            
             <item>
             <term>float param2</term>
             <description>
             End cue point of ad break in milliseconds
             </description>
             </item>
            
             </list>
             </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.OnErrorReceived(HISPlayerAPI.HISPlayerErrorInfo)">
            <summary>
            Callback to be used as a delegate with HISPlayerInterface
            in order to listen the error events internally
            <para></para>
            eventInfo: Struct which contains the information of the error event
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.ErrorInfo(HISPlayerAPI.HISPlayerErrorInfo)">
            <summary>
            Override this method to add custom logic when an error callback is triggered.
            </summary>
            <remarks>
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerErrorInfo"/> errorInfo: Struct which containt the following information of the error event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerError"/> errorType</term>
            <description>
            The enum type of the error
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the error
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerManager.ErrorNetworkFailed(HISPlayerAPI.HISPlayerErrorInfo)">
            <summary>
            Override this method to add custom logic when <see cref="F:HISPlayerAPI.HISPlayerError.HISPLAYER_ERROR_NETWORK_FAILED"/> is triggered.
            </summary>
            <remarks>
            This error occurs whenever the network on a stream playback has failed
            
            <list type="table">
            <description>
            <see cref="T:HISPlayerAPI.HISPlayerErrorInfo"/> errorInfo: Struct which containt the following information of the error event:
            </description>
            
            <item>
            <term><see cref="T:HISPlayerAPI.HISPlayerError"/> errorType</term>
            <description>
            The enum type of the error
            </description>
            </item>  
            
            <item>
            <term>int playerIndex</term>
            <description>
            The index of the associated player
            </description>
            </item>
            
            <item>
            <term>string stringInfo</term>
            <description>
            Log information about the error
            </description>
            </item>
            
            </list>
            </remarks>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface.coroutineHelper">
            <summary>
            Allow tHIS wrapper to use Coroutines from Unity
            without extends from MonoBehaviour
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._listeningEvents">
            <summary>
            Handle the loop of the HandleEvents.
            Each platform decides when to call HandleEvents coroutine
            and when finish it with '_listeningEvents = false'
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._listeningErrors">
            <summary>
            Handle the loop of the HandleErrors.
            Each platform decides when to call HandleErrors coroutine
            and when finish it with '_listeningErrors = false'
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._multiStreamProperties">
            <summary>
            MultiView attributes
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._streamTextures2D">
            <summary>
            Unity Texture2D
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._previousRenderMode">
            <summary>
            Store the previous renderMode
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._recoverPreviousRenderMode">
            <summary>
            Determines if a stream needs to recover the previous render mode.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface.isXRDevicePresent">
            <summary>
            Determines if there is an XR device being used
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._watermark">
            <summary>
            The reference to the watermark without the Canvas mode
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._watermarkCanvas">
            <summary>
            The reference to the watermark with the canvas mode
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._currUrlIndex">
            <summary>
            The current URL index of each stream
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._playbackDurationLimit">
            <summary>
            The limit of the playback duration. This value is modified by the license key
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._playbackDurationLimitChrono">
            <summary>
            Playback duration limit chrono for each stream.
            The chrono will determine whenever the current playback
            has reached the duration limit
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._isPlaying">
            <summary>
            Determines if a current stream is playing or not
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._playerIndexesToBeChecked">
            <summary>
            Stores the player indexes that need to check the license key with
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._isTryToReconnectRunning">
            <summary>
            Determines if the function TryToReconnect is running
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._isNetworkWorking">
            <summary>
            Determines if the network is working or not
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._isStreamReconnected">
            <summary>
            Determines if a certain stream has been reconnected after losing the Internet
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._sdkVersion">
            <summary>
            The SDK version
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._licenseKey">
            <summary>
            The license key used to set up the player
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface.permittedUrlDomains">
            <summary>
            List of the permitted domain for the video's URLs
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetUpPlayer(System.Collections.Generic.List{HISPlayerAPI.StreamProperties},System.String,System.Int32)">
            <summary>
            Initialize the video stream from the data stored
            in HISPlayerManager.cs
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.Release">
            <summary>
            Release everything internally
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.Play(System.Int32)">
            <summary>
            
            </summary>
            <param name="streamIndex"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.Pause(System.Int32)">
            <summary>
            
            </summary>
            <param name="streamIndex"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.Stop(System.Int32)">
            <summary>
            
            </summary>
            <param name="streamIndex"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.Seek(System.Int32,System.Int64)">
            <summary>
            
            </summary>
            <param name="streamIndex"></param>
            <param name="miliseconds"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetVolume(System.Int32,System.Single)">
            <summary>
            Set the volume of a certain player
            </summary>
            <param name="playerIndex">Index of the player</param>
            <param name="volume">New volume level</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.AddNewStream(HISPlayerAPI.StreamProperties)">
            <summary>
            Add a new stream to the list
            </summary>
            <param name="newStream">New stream to be added</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ChangeVideoContent(System.Int32,System.Int32,System.Int32,HISPlayerAPI.AdsProperties)">
            <summary>
            Change the current video content of a certain player given a urlIndex
            </summary>
            <param name="playerIndex">Index of the player</param>
            <param name="urlIndex">Index of the new url-video content</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ChangeVideoContent(System.Int32,System.String,HISPlayerAPI.HISPlayerMimeTypes,System.Int32,HISPlayerAPI.AdsProperties)">
            <summary>
            Change the current video content of a certain player given a new url
            </summary>
            <param name="playerIndex">Index of the player</param>
            <param name="url">String of the new url-video content</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.AddVideoContent(System.Int32,System.String,HISPlayerAPI.HISPlayerMimeTypes)">
            <summary>
            Add new content to a certain player given the url.
            If enableDRM variable is true, a video content with 
            empty license will be added.
            </summary>
            <param name="playerIndex">Index of the player</param>
            <param name="url">New url to be added</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.RemoveVideoContent(System.Int32,System.Int32)">
            <summary>
            Remove a certain url form a certain player's url list 
            </summary>
            <param name="playerIndex">Index of the player</param>
            <param name="urlIndex">Index of the url-video content</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.RemoveStream(System.Int32)">
            <summary>
            Remove a certain stream
            </summary>
            <param name="playerIndex">Index of the player</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetVideoPosition(System.Int32)">
            <summary>
            Provide information about the position of the current video
            of a certain player in milliseconds
            </summary>
            <param name="playerIndex">Index of the player</param>
            <returns>The position of the video</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetVideoDuration(System.Int32)">
            <summary>
            Provide information about the duration of the current video
            of a certain player in milliseconds
            </summary>
            <param name="playerIndex">Index of the player</param>
            <returns>The duration of the video</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetTracks(System.Int32)">
            <summary>
            Provide information about all the tracks of a certain stream
            </summary>
            <returns>Array with all the tracks</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetMaxBitrate(System.Int32,System.Int32)">
            <summary>
            Set a new maximum bitrate (in bits per second) of a specific track.
            THIS doesn't disable ABR.
            </summary>
            <param name="playerIndex">The index of the selected player </param>
            <param name="bitrate">The maximum bitrate</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetMinBitrate(System.Int32,System.Int32)">
            <summary>
            Set a new minimun bitrate (in bits per second) of a specific track.
            THIS doesn't disable ABR.
            </summary>
            <param name="playerIndex">The index of the selected player </param>
            <param name="bitrate">The maximum bitrate</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SelectTrack(System.Int32,System.Int32)">
            <summary>
            Select a certain track of a certain stream to be used.
            </summary>
            <param name="playerIndex">The index of the selected player </param>
            <param name="trackIndex">The index of the selected track</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetTrackBitrate(System.Int32,System.Int32)">
            <summary>
            Obtain the bitrate of a certain track
            </summary>
            <param name="trackIndex">Index of the track</param>
            <returns>The bitrate</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetTrackWidth(System.Int32,System.Int32)">
            <summary>
            Obtain the width of a certain track
            </summary>
            <param name="trackIndex">Index of the track</param>
            <returns>The width</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetTrackHeight(System.Int32,System.Int32)">
            <summary>
            Obtain the height of a certain track
            </summary>
            <param name="trackIndex">Index of the track</param>
            <returns>The height</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetTrackID(System.Int32,System.Int32)">
            <summary>
            Obtain the ID of a certain track
            </summary>
            <param name="trackIndex">Index of the track</param>
            <returns>The ID</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetTrackCount(System.Int32)">
            <summary>
            Obtain the number of tracks
            </summary>
            <returns>Number of tracks</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetPlaybackSpeedRate(System.Int32,System.Single)">
            <summary>
            Set the speed rate of a certain player.
            
            </summary>
            <param name="playerIndex">Index of the player</param>
            <param name="speed">The speed must be greater than 0.0f and less than or equal to 8.0f</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetPlaybackSpeedRate(System.Int32)">
            <summary>
            Provide information about the current speed rate of a certain player
            </summary>
            <param name="playerIndex">Index of the player</param>
            <returns>The current speed rate</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.IsLive(System.Int32)">
            <summary>
            Check if the current playback of a certain player is live
            </summary>
            <param name="playerIndex">Index of the player</param>
            <returns>Returns true if the playback is live</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetCaptionsCount(System.Int32)">
            <summary>
            Obtain the number of captions from the selected player
            </summary>
            <returns>Number of captions</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetCaptionID(System.Int32,System.Int32)">
            <summary>
            Obtain the ID of a certain caption of a certain player
            </summary>
            <param name="ccTrackIndex">Index of the caption</param>
            <returns>The language</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetCaptionLanguage(System.Int32,System.Int32)">
            <summary>
            Obtain the language of a certain caption of a certain player
            </summary>
            <param name="ccTrackIndex">Index of the caption</param>
            <returns>The language</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SelectCaptionTrack(System.Int32,System.Int32)">
            <summary>
            Select a certain caption-track of a certain stream to be used.
            Before using tHIS functions is recommended to use GetCaptionTrackList
            in order to know all the information about the captions
            </summary>
            <param name="playerIndex">The index of the selected player </param>
            <param name="ccTrackIndex">The index of the selected caption</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetVideoWidth(System.Int32)">
            <summary>
            Obtain the current track's video with
            </summary>
            <param name="playerIndex">The index of the selected player </param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetVideoHeight(System.Int32)">
            <summary>
            Obtain the current track's video with
            </summary>
            <param name="playerIndex">The index of the selected player </param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetAudioCount(System.Int32)">
            <summary>
            Obtain the number of audio tracks from the selected player
            </summary>
            <returns>Number of audio tracks</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HISPlayerAPI.HISPlayerInterface.GetAudioID(System.Int32,System.Int32)" -->
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetAudioLanguage(System.Int32,System.Int32)">
            <summary>
            Obtain the language of a certain audio track of a certain player
            </summary>
            <param name="audioTrackIndex">Index of the audio track</param>
            <returns>The language</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SelectAudioTrack(System.Int32,System.Int32)">
            <summary>
            Select a certain audio track of a certain stream to be used.
            Before using this functions is recommended to use GetAudioTrackList
            in order to know all the information about the audio tracks
            </summary>
            <param name="playerIndex">The index of the selected player </param>
            <param name="audioTrackIndex">The index of the selected audio track</param>
        </member>
        <member name="T:HISPlayerAPI.HISPlayerInterface._OnEventReceived">
            <summary>
            Delegate to be used externally tHIS script. 
            HISPlayerManager will use tHIS delegate to add and remove
            events of HISPlayerInterface
            </summary>
        </member>
        <member name="E:HISPlayerAPI.HISPlayerInterface.OnEventReceived">
            <summary>
            Event to be used with the delegate
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.AddEventCallback(HISPlayerAPI.HISPlayerInterface._OnEventReceived)">
            <summary>
            Add a new callback to the event delegate
            </summary>
            <param name="onEventReceived">New callback to be added</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.RemoveEventCallback(HISPlayerAPI.HISPlayerInterface._OnEventReceived)">
            <summary>
            Remove a callback from the event delegate
            </summary>
            <param name="onEventReceived">Callback to be removed</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ReleaseEventCallbacks">
            <summary>
            Remove all the callbacks attached to the event delegate
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.CallOnEvent(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Use the event delegate internally
            </summary>
            <param name="eventInfo">Struct which containt the information of the event</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.HandleEvent">
            <summary>
            Handle the event queue of the respective platform
            Prepared to call it wherever it's needed.
            In general, it should be called at the end of SetUpPlayer function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ProcessNextEvent">
            <summary>
            Process the next event inside the respective platform
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.isEventInQueue">
            <summary>
             Check if the event queue has events
            </summary>
            <returns>True - in case there are events in the queue</returns>
        </member>
        <member name="T:HISPlayerAPI.HISPlayerInterface._OnErrorReceived">
            <summary>
            Delegate to be used externally this script. 
            HisPlayerManager will use this delegate to add and remove
            error-events of HisPlayerInterface
            </summary>
        </member>
        <member name="E:HISPlayerAPI.HISPlayerInterface.OnErrorReceived">
            <summary>
            Error to be used with the delegate
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.AddErrorCallback(HISPlayerAPI.HISPlayerInterface._OnErrorReceived)">
            <summary>
            Add a new callback to the error-event delegate
            </summary>
            <param name="onErrorReceived">New callback to be added</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.RemoveErrorCallback(HISPlayerAPI.HISPlayerInterface._OnErrorReceived)">
            <summary>
            Remove a callback from the error-event delegate
            </summary>
            <param name="onErrorReceived">Callback to be removed</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ReleaseErrorCallbacks">
            <summary>
            Remove all the callbacks  attached to the error-event delegate
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.CallOnError(HISPlayerAPI.HISPlayerErrorInfo)">
            <summary>
            Use the error-event delegate internally
            </summary>
            <param name="errorInfo">Struct which containt the information of the error</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.HandleError">
            <summary>
            Handle the error-event queue of the respective platform
            Prepared to call it wherever it's needed.
            In general, it should be called at the end of SetUpPlayer function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ProcessNextError">
            <summary>
            Process the next event inside the respective platform
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.isErrorInQueue">
            <summary>
             Check if the error queue has events
            </summary>
            <returns>True - in case there are error-events in the queue</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.CleanTexture(UnityEngine.Color32,System.Int32)">
            <summary>
            Clean the texture of the stream element of choice with designated color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetWatermark">
            <summary>
            Display the watermark
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ApplyBlackTexture(System.Int32)">
            <summary>
            Applies a black texture to the Texture2D of a certain player
            </summary>
            <param name="playerIndex"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.RecoverPreviousRenderMode(System.Int32)">
            <summary>
            Reset the render mode of a certain player to the previous one store
            </summary>
            <param name="playerIndex"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.HandleEndOfContent(System.Int32)">
            <summary>
            Handle the loop and auto transition behaviours of a certain stream when the 
            HISPlayerEvent.HISPLAYER_EVENT_END_OF_PLAYLIST has been triggered.
            Internal usage only 
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface._enableDecodedFramesBuffer">
            <summary>
            Enable keeping a buffer with the decoded frames
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface.DecodedFramesBufferSize">
            <summary>
            Max size of the Decoded Frames Buffer
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface.DecodedFramesBuffer">
            <summary>
            Internal dictionary that implements the Decoded Frames Buffer, holding the decoded frames
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface.isDecodedFramesBufferBlocked">
            <summary>
            Whether the Decoded Frames Buffer can be written or not
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerInterface.frameBufferStreamNumber">
            <summary>
            The stream number to take the frameBuffer
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetDecodedFrameAtTimestamp(System.Int32,System.Boolean)">
            <summary>
            Retrieves a Texture2D with the decoded frame at a given timestamp
            </summary>
            <remarks>
            If no frame matches the timestamp exactly, it will retrieve the frame immediately before.
            </remarks>
            <param name="msec">The offset in milliseconds from the beginning of the media from which the decoded frame should be retrieved.</param>
            <param name="deletePreviousFrames">Whether to delete older frames from the Decoded Frames buffer. Default: true</param>
            <returns>The texture 2D of the requested frame, or null if the frame is not available for the given timestamp</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetDecodedFramesBufferRange">
            <summary>
            Retrieves the range of the Decoded Frames Buffer in milliseconds
            </summary>
            <returns>A Vector2Int with the range in milliseconds (with the start at the X component and the end at the Y component), or <c>Vector2Int.zero</c>
            if the buffer is empty. </returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.RemoveFramesFromDecodedBufferOlderThan(System.Int32)">
            <summary>
            Removes all the frames from the Decoded Frames Buffer that have a timestamp older (smaller) than the given timestamp
            </summary>
            <param name="msec"></param>
            <returns>Number of frames removed</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ClearDecodedFramesBuffer">
            <summary>
            Destroys all Texture2D in the Decoder frame buffer and then clears it
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetNetworkBandwidth">
            <summary>
            Returns the current network bandwidth.
            This value is just an estimation in kbps.
            </summary>
            <returns> The current network bw in kbps </returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetMinBufferDurationInMs(System.Int32)">
            <summary>
            Sets the minimum duration of media that the player will attempt to ensure is
            buffered at all times, in milliseconds.
            NOTE: THIS METHOD MUST BE CALLED BEFORE SETTING UP THE PLAYER
            </summary>
            <param name="minBufferDurationInMs">The minimum buffer duration in milliseconds </param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetMaxBufferDurationInMs(System.Int32)">
            <summary>
            Sets the maximum duration of media that the player will attempt to buffer,
            in milliseconds.
            NOTE: THIS METHOD MUST BE CALLED BEFORE SETTING UP THE PLAYER
            </summary>
            <param name="maxBufferDurationInMs">The maximum buffer duration in milliseconds </param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.SetPlaybackBufferInMs(System.Int32)">
            <summary>
            Sets the duration of media that must be buffered for playback to start or resume
            following a user action such as a seek, in milliseconds.
            NOTE: THIS METHOD MUST BE CALLED BEFORE SETTING UP THE PLAYER
            </summary>
            <param name="playbackBufferInMs">The initial playback buffer duration in milliseconds </param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.EnableABR(System.Int32)">
            <summary>
            Enables the ABR to change automatically between tracks. 
            </summary>
            <param name="playerIndex">Index of the player</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.DisableABR(System.Int32)">
            <summary>
            Disables the ABR to prevent the player from changing tracks regardless of bandwidth.
            </summary>
            <param name="playerIndex">Index of the player</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetAdDuration(System.Int32)">
            <summary>
            Get the duration of a certain advertisement.
            </summary>
            <param name="playerIndex">Index of the player</param>
            <returns></returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetAdRemainingTime(System.Int32)">
            <summary>
            Get the remaining time of a certain advertisement.
            </summary>
            <param name="playerIndex">Index of the player</param>
            <returns></returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.GetAdCurrentTime(System.Int32)">
            <summary>
            Get the current time of a certain advertisement.
            </summary>
            <param name="playerIndex">Index of the player</param>
            <returns></returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.TryToReconnect(System.Boolean)">
            <summary>
            Try to reconnect the network when there is no Internet
            </summary>
            <param name="checkLicense">Determines if it's needed to check the license key</param>
            <returns></returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerInterface.ReconnectPlatform(System.Boolean)">
            <summary>
            Reconnec the platform by checking the license key or initializing the videos again
            if needed after the Internet connection has returned
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.Instance">
            <summary>
            HISPlayerMacOSX's singleton
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerMacOSX.GetInstance">
            <summary>
            Generate a new HISPlayerMacOSX instance if
            it was not already created.
            </summary>
            <returns>HISPlayerMacOSX's singleton</returns>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.totalScreens">
            <summary>
            Number of the screens into the scene
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.isPlayerSetUp">
            <summary>
            Determines if the player has been set up
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.width">
            <summary>
            Width of the current video that is being played
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.height">
            <summary>
            Height of the current video that is being played
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.macosListener">
            <summary>
            The delegate that manages the EventListener for iOS
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.isEditor">
            <summary>
            Determines if the app is running on the Editor
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.eventQueue">
            <summary>
            Queue of the events to be processed
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerMacOSX.errorQueue">
            <summary>
            Queue of the errors to be processed
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerMacOSX.SetUpPlayer(System.Collections.Generic.List{HISPlayerAPI.StreamProperties},System.String,System.Int32)">
            <summary>
            After the player has been initialized, the user can set up the different streams at any time in runtime.
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerMacOSX.ProcessEvent(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Get the different event parameters
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerMacOSX.UpdateVideosEveryFrame">
            <summary>
            Support function to update the video buffer every frame
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerMacOSX.ResizeTexture(System.Int32)">
            <summary>
            In case the stream resolution is updated from the native player, change the resolution of the texture.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HISPlayerAPI.HISPlayerMacOSX.ConvertLocalPath(System.Int32,System.String)" -->
        <member name="M:HISPlayerAPI.HISPlayerMacOSX.IsWatermarkNeeded">
            <summary>
            Check if it's necessary to create the watermark
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerMacOSX.CheckVideoSizeChange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if current video size has changed from last frame. If true, send event.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.Instance">
            <summary>
            HISPlayerWindows's singleton
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWindows.getInstance">
            <summary>
            Generate a new HISPlayerWindows instance if
            it was not already created.
            </summary>
            <returns>HISPlayerWindows's singleton</returns>
        </member>
        <member name="T:HISPlayerAPI.HISPlayerWindows.HRUtils">
            <summary>
            Windows HRESULT processor
            </summary>
        </member>
        <member name="T:HISPlayerAPI.HISPlayerWindows.HRESULT">
            <summary>
            Basic HRESULT values. See:
            <see href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/common-hresult-values">Common HRESULT Values</see>
            /
            <see href="https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/705fb797-2175-4a90-b5a3-3918024b10b8">More HRESULT Values</see>
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.S_OK">
            <summary>
            Operation successful
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.S_FALSE">
            <summary>
            Operation successful but no watermark.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.NS_E_FILE_NOT_FOUND">
            <summary>
            The system cannot find the file specified.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.NS_E_INTERNAL">
            <summary>
            An unknown error occurred.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.MF_E_UNSUPPORTED_BYTESTREAM_TYPE">
            <summary>
            THIS byte stream is not supported.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.NS_E_RESOURCE_GONE">
            <summary>
            The Publishing Point or file on the Windows Media Server is no longer available.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.NS_E_BAD_REQUEST">
            <summary>
            The request could not be understood by the server.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.E_APPLICATION_TRIAL_LICENSE_EXPIRED">
            <summary>
            This app failed to launch because its trial license has expired.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.E_INVALIDARG">
            <summary>
            MessageId: E_INVALIDARG
            MessageText:
            One or more arguments are invalid
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.HRESULT.E_ILLEGAL_METHOD_CALL">
            <summary>
            MessageId: E_ILLEGAL_METHOD_CALL
            MessageText:
            A method was called at an unexpected time.
            </summary>
        </member>
        <member name="T:HISPlayerAPI.HISPlayerWindows.WMP_State">
            <summary>
            Different states defined inside the native Windows Media Player
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.captionTrackDictionary">
            <summary>
            Dictionary with all the caption tracks received from the native player.
            </summary>
            <remarks>
            Using a dictionary instead of a list to avoid adding duplicates, which is fairly common in windows.
            </remarks>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.currentMediaDescription">
            <summary>
            Variables to handle the texture
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.textureSize">
            <summary>
            Stores the size of the texture of each stream
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.isStopped">
            <summary>
            Stop status is not supported by the native and needs to be handled manually
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.isEditor">
            <summary>
            Determines if the SDK is running in the Editor
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.appID">
            <summary>
            The App ID of the Windows Instance.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.isPlayerSetUp">
            <summary>
            Determines if the player has been set up
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.totalScreens">
            <summary>
            Number of the screens into the scene
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.isContentLoaded">
            <summary>
            Determines if the content has been loaded
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.isContentLoading">
            <summary>
            Determines if the content is loading
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.isWatermarkAdded">
            <summary>
            Determines if the watermark has been added
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.playbackState">
            <summary>
            Determines the state of the current playback of a certain stream
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.WindowsInstancePtrs.windowsInstancesByPtrs">
            <summary>
            The purpose of tHIS dictionary is accessing member variables and methods from the static callbacks
            </summary>
            <remarks>
            Warning: Changing the callbacks to member methods compiles, but accessing any member variables or methods causes a runtime crash
            </remarks>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.windowsPtrs">
            <summary>
            Instance of each stream and its respective pointer
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWindows.UpdateVideosEveryFrame">
            <summary>
            Support function to update the video buffer every frame
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWindows.endOfFrame">
            <summary>
            Function to get a rendering event callback function from Unity to plugin
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWindows.SetNativeLogLevel(System.Boolean)">
            <summary>
            Enables or disables full logs of the native player
            </summary>
            <remarks>
            Calls <see cref="M:HISPlayerAPI.HISPlayerWindows.SetNativeLogLevel(HISPlayerAPI.HISPlayerWindows.InternalLogLevel)"/> in ternally
            </remarks>
            <param name="fullLogsEnabled"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWindows.SetNativeLogLevel(HISPlayerAPI.HISPlayerWindows.InternalLogLevel)">
            <summary>
            Sets a specific <see cref="T:HISPlayerAPI.HISPlayerWindows.InternalLogLevel"/> for the native player
            </summary>
            <remarks>
            For debuging. For release, use <see cref="M:HISPlayerAPI.HISPlayerWindows.SetNativeLogLevel(System.Boolean)"/> instead
            </remarks>
            <param name="logLevel"></param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWindows.HandleHISPlayerResult(HISPlayerAPI.HISPlayerWindows.HISPlayerResult,System.Boolean,System.Int32,System.String)">
            <summary>
            Handle the HISPlayerResult when creating the Windows Media Player and 
            creating media contents
            </summary>
            <param name="result">The result to be handled</param>
            <param name="isEditor">Determines if is the Editor or not</param>
            <param name="playerIndex">The index of the player attached to the results</param>
            <param name="url">URL of the content that is going to be loaded</param>
            <returns>True if success </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:HISPlayerAPI.HISPlayerWindows.ConvertLocalPath(System.Int32,System.String)" -->
        <member name="F:HISPlayerAPI.HISPlayerAndroid.Instance">
            <summary>
            HISPlayerAndroid's singleton
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.GetInstance">
            <summary>
            Generate a new HISPlayerAndroid instance if
            it was not already created.
            </summary>
            <returns>HISPlayerAndroid's singleton</returns>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerAndroid.totalScreens">
            <summary>
            Number of the screens into the scene
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerAndroid.isPlayerSetUp">
            <summary>
            Determines if the player has been set up
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerAndroid.isOpenGL3">
            <summary>
            Determines if there is the correct version of OpenGL
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerAndroid.isVulkan">
            <summary>
            Determines if the graphics API is Vulkan
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerAndroid.isWatermarkAdded">
            <summary>
            Determines if the watermark has been added
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerAndroid.isFirstURL">
            <summary>
            Determines if the license key has been checked for the first URL
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.SetUpPlayer(System.Collections.Generic.List{HISPlayerAPI.StreamProperties},System.String,System.Int32)">
            <summary>
            After the player has been initialized, the user can set up the different streams at any time in runtime.
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.IsXRDevicePresent">
            <summary>
            Detects if there is an XR device being used
            </summary>
            <returns>True if there is an XR device</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.ProcessNextEvent">
            <summary>
            Get the different event parameters
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.HISPlayerListener(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Support function to process the current event received
            </summary>
            <param name="eventInfo">Struct which containt the information of the event</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.HISPlayerErrorListener(HISPlayerAPI.HISPlayerErrorInfo)">
            <summary>
            Support function to process the current event received
            </summary>
            <param name="eventInfo">Struct which containt the information of the event</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.UpdateVideosEveryFrame">
            <summary>
            Support function to update the video buffer every frame
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.UpdateNativeTexture(System.Int32)">
            <summary>
            Update the native texture creating a new Texture2D to be used in the native side. It also updates
            the resolution in the case of changing the video track
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.GetValidURLString(System.Int32,System.String)">
            <summary>
            Returns a valid URL string for ExoPlayer given an URL.
            <br>
            Local Content: Checks if the '/' symbol is included at the beginning of the url 
                            to combine with Application.persistentDataPath or Application.streamingAssetsPath
            </br>
            <br>
            Streaming Content: Checks if the URL stream begins with 'http' or 'https'. The 
                              'http' will be replaced by 'https'. ExoPlayer doesn't support
                              'http' protocol.
            </br>
            </summary>
            <param name="payerIndex">The index of the player in multistream properties</param>
            <param name="url">The original URL</param>
            <returns>Returns the valid URL string</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.CheckLicenseKeyWhenFirstURLIsLoaded(System.Int32)">
            <summary>
            Check the license key only when the first URL of a stream has been loaded.
            More license key checking will take place in the native side
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerAndroid.CleanPlayList(System.Int32)">
            <summary>
            Clean the entire playlist of a certain stream
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.Instance">
            <summary>
            HISPlayeriOS's singleton
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.GetInstance">
            <summary>
            Generate a new HISPlayeriOS instance if
            it was not already created.
            </summary>
            <returns>HISPlayeriOS's singleton</returns>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.totalScreens">
            <summary>
            Number of the screens into the scene
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.isPlayerSetUp">
            <summary>
            Determines if the player has been set up
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.width">
            <summary>
            Width of the current video that is being played
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.height">
            <summary>
            Height of the current video that is being played
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.iosListener">
            <summary>
            The delegate that manages the EventListener for iOS
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.isWatermarkAdded">
            <summary>
            Determines if the watermark has been added
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.isPlaybackReady">
            <summary>
            Determines if the current playback of a certain stream is ready
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS.isLicenseChecking">
            <summary>
             Determines if the license is being checked
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.SetUpPlayer(System.Collections.Generic.List{HISPlayerAPI.StreamProperties},System.String,System.Int32)">
            <summary>
            After the player has been initialized, the user can set up the different streams at any time in runtime.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS._eventQueue">
            <summary>
            Queue of the events to be processed
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayeriOS._errorQueue">
            <summary>
            Queue of the errors to be processed
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.ReceiveNativeEvent(System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Callback to receive the different Errors/Events from the native side
            </summary>
            <param name="isError">Determines if the received event is an error or not</param>
            <param name="type">The Error/Event type</param>
            <param name="playerIndex">The index attached to the Error/Event</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.UpdateVideosEveryFrame">
            <summary>
            Support function to update the video buffer every frame
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.ResizeTexture(System.Int32)">
            <summary>
            In case the stream resolution is updated from the native player, change the resolution of the texture.
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.IsWatermarkNeeded">
            <summary>
            Check if it's necessary to create the watermark
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.IsNCGLive(System.String)">
            <summary>
            Determines if the uri is 'NCG Live'which means that
            the uri is HLS and ends with .m3u8 extension
            </summary>
            <param name="uri">The uri to be checked</param>
            <returns>True - The uri is .m3u8 (NCG Live)</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayeriOS.CheckVideoSizeChange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if current video size has changed from last frame. If true, send event.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.Instance">
            <summary>
            HisPlayerWebGL's singleton
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.getInstance">
            <summary>
            Generate a new HisPlayerWebGL instance if
            it was not already created.
            </summary>
            <returns>HisPlayerWebGL's singleton</returns>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.isPlayerSetUp">
            <summary>
            Determines if the player has been set up
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.totalScreens">
            <summary>
            Number of the screens into the scene
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.isWatermarkChecked">
            <summary>
            Determines if the watermark has been checked
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.startBitrate">
            <summary>
            The WebGL starting bitrate.
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.playerIndexToWebGLIndex">
            <summary>
            Convert Unity playerIndex into WebGL playerIndex 
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.webGLIndexToPlayerIndex">
            <summary>
            Convert WebGL playerIndex into Unity playerIndex  
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerWebGL.isPlaybackReady">
            <summary>
            Determines if the playback of a certain stream is ready
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.WaterMarkCB(System.Boolean)">
            <summary>
            Callback for CheckWatermark request, necessary to retrieve the async data
            </summary>
            <param name="watermark">True if the watermark is enabled, false otherwise</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.CheckWatermark">
            <summary>
            Sets the watermark if the license has it enabled
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.HisPlayerListener(HISPlayerAPI.HISPlayerEventInfo)">
            <summary>
            Support function to process the current event received
            </summary>
            <param name="eventInfo">Struct which containt the information of the event</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.HISPlayerErrorListener(HISPlayerAPI.HISPlayerErrorInfo)">
            <summary>
            Support function to process the current error received
            </summary>
            <param name="errorInfo">Struct which containt the information of the error</param>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.UpdateVideosEveryFrame">
            <summary>
            Support function to update the video buffer every frame
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.UpdateVideoTexture(System.Int32)">
            <summary>
            Support function to update a certain video texture
            </summary>
            <param name="playerIndex">Index of the texture to be updated</param>
            <returns>The updated texture</returns>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.AddStream(HISPlayerAPI.StreamProperties,System.Int32,System.Int32)">
            <summary>
            Auxiliar function to add streams
            </summary>
        </member>
        <member name="M:HISPlayerAPI.HISPlayerWebGL.CleanPlayList(System.Int32)">
            <summary>
            Clean the entire playlist of a certain stream
            </summary>
        </member>
        <member name="T:HISPlayerAPI.HISPlayerMimeTypes">
            <summary>
            HISPlayer supported MIME Types
            <br>
            </br>
            URL_EXTENSION: The MIME type will be extracted from the URL extension
            <br>
            </br>
            HLS: The "application/x-mpegURL" MIME type will be used
            <br>
            </br>
            DASH: The "application/dash+xml" MIME type will be used. Not supported for iOS and macOS
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerTrack.id">
            <summary>
            id of the track
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerTrack.bitrate">
            <summary>
            Bit rate of the track in bits per second
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerTrack.width">
            <summary>
            Width of the track if available
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerTrack.height">
            <summary>
            Height of the track if available
            </summary>
        </member>
        <member name="F:HISPlayerAPI.HISPlayerTrack.framerate">
            <summary>
            Frame rate of the track in frames per second
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:HISPlayerAPI.HISPlayerCaptionTrack.id" -->
        <!-- Badly formed XML comment ignored for member "F:HISPlayerAPI.HISPlayerCaptionTrack.language" -->
        <!-- Badly formed XML comment ignored for member "F:HISPlayerAPI.HISPlayerAudioTrack.id" -->
        <!-- Badly formed XML comment ignored for member "F:HISPlayerAPI.HISPlayerAudioTrack.language" -->
        <member name="F:HISPlayerAPI.HISPlayerCaptionElement.playerIndex">
            <summary>
            Index of the player associated
            with the caption
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:HISPlayerAPI.HISPlayerCaptionElement.caption" -->
        <!-- Badly formed XML comment ignored for member "M:HISPlayerAPI.HISPlayerCaptionElement.#ctor(System.Int32,System.String)" -->
        <member name="T:HISPlayerUtility.CoroutineHelper">
            <summary>
            Support class for being able to use Coroutines into the HisPlayerInterface
            </summary>
        </member>
        <member name="F:HISPlayerUtility.HISPlayerWatermarkRawImage.DEFAULT_SIZE">
            <summary>
            The default size of the width/height of the watermark image
            </summary>
        </member>
        <member name="F:HISPlayerUtility.HISPlayerWatermarkRawImage.ASPECT_RATIO">
            <summary>
            The aspect ration between width and height of the watermark image
            </summary>
        </member>
    </members>
</doc>
